// media queries
@mixin breakpoint($size) {
    @media (mediaQuery("property"): #{ 
            breakpoint($size) + 
            mediaQuery("unit")
		}
	) {
        @content;
    }
}
@mixin desktop {
    @media not all and (hover: none) {
        @content;
    }
}
@mixin animation {
    @media (prefers-reduced-motion: no-preference) {
        @content;
    }
}

// transitions and states
@mixin transition($type, $properties...) {
    $transition: map-get($transitions, $type);
    transition-property: $properties;

    @each $property, $value in $transition {
        transition-#{$property}: $value;
    }
}
@mixin state($states, $onlyProperty: null, $typeTransition: "button") {
    $isSVG: isSVG($onlyProperty);
    $property: null;
    $value: null;

    @each $state, $stateValue in $states {
        @if $state == default {
            @if $onlyProperty and $isSVG {
                path {
                    @include transition($typeTransition, $onlyProperty);
                }
            } @else if $onlyProperty {
                @include transition($typeTransition, $onlyProperty);
            } @else {
                @include transition(
                    $typeTransition,
                    map-keys($stateValue)
                );
            }
        }

        @each $eachProperty, $eachValue in $stateValue {
            @if $onlyProperty {
                $property: $onlyProperty;
                $value: $stateValue;
            } @else {
                $property: $eachProperty;
                $value: $eachValue;
            }

            @if $state == default {
                @if $isSVG {
                    path {
                        #{$property}: $value;
                    }
                } @else {
                    #{$property}: $value;
                }
            } @else if $state == hover {
                &:hover #{$isSVG} {
                    #{$property}: $value;
                }
            } @else if $state == active {
                &:active #{$isSVG} {
                    #{$property}: $value;
                }
            } @else if $state == focus {
                &:focus #{$isSVG} {
                    #{$property}: $value;
                    outline: none;
                }
            }
        }
    }
}

// general
@mixin SVGResponsive {
    display: block;
    max-width: 100%;
    height: auto;
}
@mixin center {
    margin-left: auto;
    margin-right: auto;
}
@mixin scrollbar {
    /* Firefox */
    scrollbar-width: none;
    scrollbar-color: color("supportLight4") transparent;

    /* Chrome, Edge, and Safari */
    &::-webkit-scrollbar {
        width: 8px;
        height: 8px;

    }
    &::-webkit-scrollbar-track {
        background: transparent;
    }
    &::-webkit-scrollbar-thumb {
        background-color: color("supportLight4");
        border-radius: 15px;
        border: 0px solid transparent;
    }
}
@mixin hideInput {
    display: block;
    width: 0px;
    height: 0px;
    overflow: hidden;
    visibility: hidden;
}
@mixin label {
    display: block;
        padding: 2rem;
        border-radius: $borderRadius;
        cursor: pointer;

        @include state((
            default: (
                border: 1px solid color("supportLight4"),
                background-color: transparent,
            ),
            hover: (border-color: color("primary")),
            active: (background-color: color("primaryLight3"))
        ));
}
@mixin labelActive {
    background-color: color("supportLight3");
    border-color: color("primary");
}